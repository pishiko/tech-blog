<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ぴしめも</title>
    <link>https://blog.p4ko.com/categories/%E3%81%B4%E3%81%97%E3%82%81%E3%82%82/</link>
    <description>Recent content on ぴしめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 21 Sep 2021 23:01:15 +0900</lastBuildDate><atom:link href="https://blog.p4ko.com/categories/%E3%81%B4%E3%81%97%E3%82%81%E3%82%82/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARフリーハンドおえかきアプリを作りました（完成）</title>
      <link>https://blog.p4ko.com/posts/aroekaki/</link>
      <pubDate>Tue, 21 Sep 2021 23:01:15 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/aroekaki/</guid>
      <description>こんなやつです （Twitter の動画）
loading...
&amp;mdash; pishiko (@pishitaro_) loading... 追記：カラー対応してパレットをいくつか用意しました 追記：滑らかさや入力感度の設定を追加しました 追記：ピースサインでスポイトできる機能を追加しました フレームワークなど ARFoundation Unity のモバイル AR 向け API です． これによって自己位置推定が可能になるため，現実の空間上に描いた物体を表示させることが出来ます． ついでにマルチプラットフォーム対応です．（iOS, Android）(試したのは Android だけですが)
Mediapipe Google の画像処理系機械学習ライブラリです．骨格推定や表情推定などが扱えますが，ハンドトラッキングを使用しています． モバイル向けのハンドトラッキングで精度の高さと軽量さ（あと無料なやつ）を考えると多分これが一番いいと思います．
動機 講義で自由制作があったので作ってます．
まだ製作途中ですが，発表が終わったらスライドなどもろもろ上げたいと思います．
追記： いろいろ機能を追加したり，入力精度がそれなりになったりで満足しています．平滑化をいい感じにしたらいい感じに書きやすくなりました．講義も終わったのでこれで完成かな～
おわり </description>
    </item>
    
    <item>
      <title>🚀VOYAGEのインターン「Treasure」に参加しました2021</title>
      <link>https://blog.p4ko.com/posts/treasure21/</link>
      <pubDate>Sat, 28 Aug 2021 22:10:18 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/treasure21/</guid>
      <description>こんな目標で臨みました  Web 開発わからんが多いので地固めしたい！ チーム開発の機会がないのでいろいろ試したい！ つよつよの人と交流したい！  こんな感じの流れでした  1 週目：Go バック・React/TS フロント・AWS 講義，フィードバック 2 週目：DB 設計・アイデア講義，チーム開発 3 週目：チーム開発，プレゼン・フィードバック  レポート えっ！未経験からでも行けるインターンがあるんですか！？ 応募のことを思い出すため改めてメールを確認したところ，応募したのが 1 月で，決まったのが 4 月くらいでした．早期選考枠というやつです．
インターンは今回が人生初で，今までの業務経験というと，画像処理・機械学習寄りのバイトくらいで，業務での Web 開発の経験は全くありませんでした．にもかかわらず参加できたのは，大なり小なりいろいろ公開していたのが大きかったのかなと思います．拙いものでも公開するのは大事だなと思いました．
実際参加者を見ても，Web 経験はないけど競プロ強いです！，機械学習強いです！，ネタ iPhone アプリ作ってます！みたいな人も多かったので，そういうことかなと思います．
えっ！一人で Web サービス開発できるようになるんですか！？ インターンの前半は講義でした．どの講義も手を動かすのですが，チームに向けて課題を出す，壁にぶつからせる，それについて議論させる，といった内容が多かったです．
今回のインターンは全体的に議論の機会が多かったのですが，チームによって様々な意見が出るのは本当に楽しかったです．特に API 設計や DB 設計での議論はかなり学びになりました．「なんとなく」から「明確な理由をもって」，「自信をもって」実装できるようになったと思います．
また，ベースアプリを拡張していく形で講義が進んでいくので，良いコードにどっぷり浸かれたのもよかったです．命名規則や実装方針など，書く時に意識することやノウハウもかなり吸えたと思います．
それからメンターの方も親切にしてくれて，本質から外れたしょうもないエラーは一緒に考えてもらってパパっと解決したり，逆に理解不足なところは分かるように誘導してくださったり，本当に手厚かったです．
「一人で Web サービス開発できるようになる」と書きましたが，苦手なレイヤも基本を押さえたことで，自走できるようになったかなと思います．
えっ！チーム開発楽しすぎませんか！？ 後半はチーム開発でした．テーマは決まっておらず，自分たちで時流を基にアイデアを出して開発します．基本４人１チームなんですがなぜかうちのチームは３人で，そのためチーム名は「人数不足の分はまあ有り余る才能でカバーしたいと思っております」チームとなりました．
３人ということで，バックエンドとフロントエンド一人ずつで，僕は両方にヘルプに行くというムーブで開発を進めていました．基本的に Discord で画面共有をしながらの開発でしたが，相談やここわからんを一緒に解決できたりしてよかったなーと思いました．
チーム開発における Github の運用方法はかなり勉強になりました．とにかくレビュワーに分かりやすいように細かく PR を投げるのが大事．あとは swagger で API 定義から始めて開発するの大事とか，CI/CD も導入したりしてみたりとか，学びがたくさんありました．
逆に反省点もたくさんありました．フロントとバックの接合が最終日になったりしてちょっとハラハラしました．他のチームもやってましたが，しっかりモックを作っておけばよかったなと思います．あとは設計の時に妥協しちゃった部分があったり，発表でアピールするためにどこを作り込むべきだったかとか，完成した後の追加機能のリリースのバグが取れなくて間に合わなかったり．悔しい！！
というわけで，ノウハウもたくさん溜まったので，次こそはうまくやるぞという気持ちでもう一回チーム開発がしたいです！
おわりに いろいろ書きましたが，とにかく楽しかったです．インターン生やメンターの方との交流も，チーム開発のお祭り感も（時間が無いわちゃわちゃ感は文化祭を思い出しました），唯一無二の体験でした．
インターン生，サポーター，それからメンバーのたんたんとイジチ，本当にありがとうございました！
PS こちらは支給品のデイリーナッツ loading.</description>
    </item>
    
    <item>
      <title>Hugoで個別ページを作る</title>
      <link>https://blog.p4ko.com/posts/addstaicpage/</link>
      <pubDate>Fri, 02 Jul 2021 22:23:12 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/addstaicpage/</guid>
      <description>やりたいこと Hugo でブログを書いて，About やポートフォリオなどの特別なページを作りたい．
通常投稿のテンプレートではなく，独自のスタイルのテンプレートを利用したい．
やり方 目標は
p4ko.com/posts/通常投稿/ p4ko.com/posts/通常投稿2/ p4ko.com/プロダクト/ 👈特別なページ ファイル構成は
/content/posts/通常投稿.md /content/posts/通常投稿2.md /content/プロダクト.md 👈追加ページ /layouts/custom/product.html 👈独自テンプレート プロダクト.mdの frontmatter に次を追加します（YAML の場合）
--- type: &amp;#34;custom&amp;#34; layout: &amp;#34;product&amp;#34; --- product.htmlにテンプレートを書きます． テーマの通常投稿のテンプレート（/themes/HOGE/layouts/_default/single.html）をコピーして弄るとよいと思います．
完全にベタ書きしたい場合は markdown の本文は空でもいいですし，もしくはテンプレート{{ .Content }}から本文を取ってきてもよいです．
あとがき 経緯 日本語の情報が無かったので書きました．
制作物まとめのページを以前から通常の投稿として置いていたのですが，もうちょっと見た目を良くしたかったので，追加テンプレートから生成するよう（というかほぼベタ書き）にしました．👇
⭐ 制作物まとめ ⭐ // ぴしめも
参考 Creating &amp;lsquo;static&amp;rsquo; content that uses partials - support - HUGO
おわり</description>
    </item>
    
    <item>
      <title>Android向け「おえかきキーボード」をPlay Storeでリリースしました</title>
      <link>https://blog.p4ko.com/posts/paint-keyboard/</link>
      <pubDate>Wed, 26 May 2021 21:54:53 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/paint-keyboard/</guid>
      <description>おえかきキーボード というアプリを作りました．Android 向けの IME です． ちなみに英語版は&amp;quot;Scrobble Keyboard&amp;quot;です．
専用ページはこちら 👇
おえかきキーボード
詳しくは 👆 の紹介ページに書いてあるのですが，簡単に説明すると，画像貼り付けに対応したテキスト入力中にサクッと絵を描けるキーボードで，コンセプトは「スタンプをその場で書いて送ろう」です．
こんな感じで Twitter とか LINE とかでインスタントに送れたら面白いかなーと．
所感 リポジトリもあります 👇
pishiko/paint-keyboard: Android 向けおえかきキーボードアプリ
IME の情報がインターネット上に無いのと，IME の Service が特殊なライフサイクルなのもあって結構手探りでした．
はじめてのアプリリリース Android アプリ自体はいくつか作ったことがあったのですが，全体に公開することはありませんでした． Play Store にリリースは前からしたかったことの一つなので，とりあえずリリース出来たな～という感じです． プライバシーポリシーが無くてリジェクトとか，英語に対応するとか，審査が遅いとか，アプリリリースの面倒ごとは大体経験したので，次はもう少し大きいアプリでもリリースしようかなーと思ってます．
loading...
&amp;mdash; pishiko (@pishitaro_) loading... おわり</description>
    </item>
    
    <item>
      <title>Build MediapipeUnityPlugin for Android</title>
      <link>https://blog.p4ko.com/posts/build-mediapipe-unity-plugin/</link>
      <pubDate>Mon, 17 May 2021 17:15:19 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/build-mediapipe-unity-plugin/</guid>
      <description>homuler/MediaPipeUnityPlugin: Unity plugin to run MediaPipe graphs
Versions  MediapipeUnityPlugin v0.6.0   This is a Unity (2020.3.8f1) Plugin to use MediaPipe (0.8.3.1).
  WSL2 Windows10 Home Ubuntu20.04 Python3.9 bazel 4.0.0 gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 NuGet Version: 5.6.0.6489 .NET SDK Version: 5.0.203 Mono 6.12.0.122 Android SDK Build-Tools 29.0.2 Android NDK (Side by side) 21.4.7075529  MediaPipeUnityPlugin homuler/MediaPipeUnityPlugin: Unity plugin to run MediaPipe graphs
git clone https://github.com/homuler/MediaPipeUnityPlugin.git cd MediaPipeUnityPlugin OpenCV, FFmpeg Installation - mediapipe</description>
    </item>
    
    <item>
      <title>WordPress 引っ越し日記【bitnami⇨レンタルサーバ】</title>
      <link>https://blog.p4ko.com/posts/wordpress-move/</link>
      <pubDate>Wed, 31 Mar 2021 22:57:33 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/wordpress-move/</guid>
      <description>WordPress の引っ越し作業をしたのですが，思いのほかやることが多く詰まったので作業メモを残しておきます．
bitnami (on AWS) から XREA レンタルサーバ に引っ越しします． ついでにムームードメインで購入したドメインを AWS Route53 からレンタルサーバと一緒に使えるバリュードメイン DNS に引っ越しもします．
無料から使える高機能・高品質レンタルサーバー | XREA（エクスリア）
リダイレクトの設定を切る /opt/bitnami/apps/wordpress/conf/htaccess.conf の該当部を以下の様にコメントアウト
# BEGIN Custom #RewriteCond %{HTTP_HOST} !^www\. #RewriteRule ^(.*) $https://www.%{HTTP_HOST}/$1 [R=301,L] #END Custom Wordpress を丸々ダウンロードする /opt/bitnami/apps/wordpress/htdocsの中身を丸々ダウンロードする．
MySQL のデータを引っ越し PHPMYADMIN から SQL をエクスポート localhost からしかログインできないので /opt/bitnami/apps/phpmyadmin/conf/httpd-app.confを編集し，
&amp;lt;IfVersion &amp;lt; 2.3 &amp;gt; Order allow,deny Allow from 127.0.0.1 Allow from &amp;lt;YOURIP&amp;gt; Satisfy all &amp;lt;/IfVersion&amp;gt; &amp;lt;IfVersion &amp;gt;= 2.3&amp;gt; Require local Require ip &amp;lt;YOURIP&amp;gt; &amp;lt;/IfVersion&amp;gt; ErrorDocument 403 &amp;quot;For security reasons, this URL is only accessible using localhost (127.</description>
    </item>
    
    <item>
      <title>VSCodeの見た目を自分好みにする</title>
      <link>https://blog.p4ko.com/posts/vscodesettings/</link>
      <pubDate>Sat, 27 Feb 2021 19:45:05 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/vscodesettings/</guid>
      <description>VSCode の設定 変えすぎて何が何だかよくわからなくなってきそうなので整理も兼ねて設定を並べていきたいと思います．
テーマ Solarized Dark を使用しています．
Solarized
&amp;#34;workbench.colorTheme&amp;#34;: &amp;#34;Solarized Dark&amp;#34;, フォント 半角が Cancadia Code，全角日本語が Han Code になるように設定しています． Cancadia Code は Microsoft の作った WindowsTerminal のデフォルトフォントで，リガチャにも対応しています． 日本語は見やすさ重視です．
microsoft/cascadia-code: This is a fun, new monospaced font that includes programming ligatures and is designed to enhance the modern look and feel of the Windows Terminal.
adobe-fonts/source-han-code-jp: Source Han Code JP | 源ノ角ゴシック Code
&amp;#34;editor.fontFamily&amp;#34;: &amp;#34;Cascadia Code, Han Code JP&amp;#34;, リガチャ（合字）は個別に有効にする必要があります．
&amp;#34;editor.fontLigatures&amp;#34;: true, ターミナルの配色 Onehalfという配色を使ってます．</description>
    </item>
    
    <item>
      <title>Discord Slash Commandについての記事を投稿した</title>
      <link>https://blog.p4ko.com/posts/slashcommand/</link>
      <pubDate>Sat, 27 Feb 2021 19:44:55 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/slashcommand/</guid>
      <description>アドベントカレンダー 去年の年末に Qiita の DiscordBot アドベントカレンダーに初参加して，記事を投稿してみました．
 アドベントカレンダーどころか Qiita に投稿するのは初だったのですが，人に読まれる文章を書くのって難しいですね&amp;hellip;
Discord の SlashCommand はまだ β 版ですが，Slack の SlashCommand に比べて入力補助がしっかりしてるので，かなり期待の機能です． 入力補助というのは，ユーザーだったりチャンネルだったりの選択をクリックするだけで埋められるというもので，大変使いやすいので今後は全てこっちに移植していきたいと思います．
Future DiscordBot のインタフェースは更に改善されていくと以下で公式に明言されています．楽しみですね．
The Future of Bots on Discord. In case you weren’t aware, robots have… | by Nelly | Discord Blog
以下のような UI が扱えるらしいです．ちょっとしたツールとしても全然使えそう．
おわり</description>
    </item>
    
    <item>
      <title>新ドメインにしました</title>
      <link>https://blog.p4ko.com/posts/domain/</link>
      <pubDate>Sun, 17 Jan 2021 19:08:19 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/domain/</guid>
      <description>pishiko.github.ioからp4ko.comに変更しました！
p(ぴ)4（し）ko(こ).com ということで，大変覚えやすいですね．
Github Pages + カスタムドメイン + HTTPS github pages でホストしているサイトにカスタムドメインを割り当てる方法は以下に書いてありました．
Managing a custom domain for your GitHub Pages site - GitHub Docs
それから，Hugo の場合は生成時に CNAME ファイルが消されてしまうので，static/以下に CNAME ファイルを置いておく必要があります．
CNAME ファイルは github が自動で生成してくれるので，pull した後public/直下にある CNAME ファイルを static/直下にコピーしておけばよいはずです．
追記 カスタムドメインで https 化するにあたって，リポジトリの settings の Enforced Https のチェックを入れるだけでいいと思っていたんですが，A レコードを DNS に登録しても いつまでもチェックボックスを押せませんでした．
一度カスタムドメインを外して再設定したところ表示が変わったのですが，15 分どころか１時間くらいこんな感じでした．
で，以下を参考に，www の CNAME レコードを USERNAME.github.io に設定すると１日ほどでチェックできるようになっているといいな．（まだできてない）
Certificate request error is persistent (TLS Certificate can&amp;rsquo;t be provisioned) - GitHub Help / GitHub Pages - GitHub Support Community</description>
    </item>
    
    <item>
      <title>Go ファミコンエミュレータ開発記録 その1</title>
      <link>https://blog.p4ko.com/posts/nes1/</link>
      <pubDate>Mon, 23 Nov 2020 00:24:55 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/nes1/</guid>
      <description>リポジトリ
 日記みたいなものです． Twitter モーメントはこちら
動機 任天堂レトロハードが好きなんですが，せっかくなら遊ぶだけじゃなくて中身にも詳しくなりたいと思っていました． 一番好きなのはスーファミなんですが，仕様が公開されておらず難易度が高そうなので，とりあえずシンプルそうなファミコンの動作の理解をしようと． で，前に Qiita でファミコンエミュレータの Hello world 解説記事があったのを思い出したので，今ならできる！と思って始めました．
偉大なる先駆者様 ファミコンエミュレータの創り方　- Hello, World!編 - - Qiita
Python で実装したい！ 最初は他の人がまだやっていないものを作りたくて，Python で書いて matplot のグラフ出力画面で動いたらオツだよな～と思って書いていたのですが，普通に CPU が 60fps でないので泣く泣く諦めました．
これは果たされなかった夢の跡です． loading...
&amp;mdash; pishiko (@pishitaro_) loading...
実装の流れは，ROM reader-&amp;gt;CPU（Adressing -&amp;gt; OP -&amp;gt; WRAM read/write）-&amp;gt; PPU( VRAM read/write -&amp;gt;Line 生成-&amp;gt;描画 )でした．
Go 編 ということで，妥協して golang を採用しました． python は 8bit で uint として数値を扱えないので書きにくかったのですが，Go は圧倒的に楽でした．
Python のソースコードをほぼ移植する形で，HelloWorld を実行したところ CPU は 60fps 十分に出ました．最高！</description>
    </item>
    
    <item>
      <title>Discord Bot 開発あれこれ</title>
      <link>https://blog.p4ko.com/posts/discordpy/</link>
      <pubDate>Sun, 11 Oct 2020 02:26:36 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/discordpy/</guid>
      <description>身内コミュニティ向け discord bot を複数人で開発しているので，有用そうなレシピを書いていきます．
環境 python の discordAPI ラッパーである discordpy 製 bot を github で管理し，heroku 上で動かしています．
 discord.py へようこそ。 — discord.py 1.5.0 ドキュメント 【備忘録】GitHub 経由で Heroku にデプロイするまでの流れ - Qiita  heroku の設定 基本  デプロイに必要なファイルの設定 | Python で実用 Discord Bot(discordpy 解説) - Qiita  時間を正しく扱うために  Heroku のタイムゾーンを日本に合わせる - Qiita  Heroku の仕様  24 時間に 1 回再起動 ファイルは/tmp/以下でのみ書き込み可能． 再起動時にファイルなどはリポジトリの状態に初期化される  Cog で機能を分けて開発 Cog というのは，discordpy で提供されている，機能を分割するためのクラスです． メインの Bot に Cog を追加していく形になります．</description>
    </item>
    
    <item>
      <title>Hugoのthemeを上書きできない問題</title>
      <link>https://blog.p4ko.com/posts/css-custom/</link>
      <pubDate>Tue, 06 Oct 2020 16:50:38 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/css-custom/</guid>
      <description>hugo serverで確認しながらテーマの上書きを試みてるんだけど，全然上書きされない．
あれーと思って キャッシュを強制再読み込みする --ignoreCache を付けてサーバーを起動してみたら次のエラーが出た．
&amp;gt;hugo server --ignoreCache Building sites … ERROR 2020/10/06 14:44:37 Transformation failed: TOCSS: failed to transform &amp;quot;css/main.scss&amp;quot; (text/x-scss): this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 501 ms Error: Error building site: logged 1 error(s) で，公式のヘルプを読む．
Frequently Asked Questions | Hugo
要約すると，Hugo は 2 バージョンあって，通常版と extended 版がある．Sass(css の拡張言語)に対応してるのは extended 版だけだからそっちにしてね．です．ちなみに，extended 版は少し重いらしい．あんまり気にならなかったけど．
ということでReleases · gohugoio/hugoからダウンロードして，Path を通してあった場所を探して，Hugo.exe だけ入れ替える．</description>
    </item>
    
    <item>
      <title>【Last.fm&#43;Discord】Now Playing Cat取扱説明書</title>
      <link>https://blog.p4ko.com/posts/nowplayingcat/</link>
      <pubDate>Tue, 14 Jul 2020 10:32:41 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/nowplayingcat/</guid>
      <description>(2020 9/9 追記: v1.2 でバグ修正をしました．記事一番下にアップデート方法を記載．)
NowPlayingCat Github
Discord の NowPlaying 欄に，Last.fm を通して聴いている音楽を表示するツールです．
Last.fm がほとんどの音楽サービスに対応しているため，どんなサービスで音楽を聴いていても表示できます．
Windows にしか対応していません．
Last.fm とは Last.fm は，聴いている音楽を記録し，自分の音楽傾向を知ったり，新たなジャンルを発見する音楽 SNS サービスです．
詳しくはこちら
導入方法 前提として，Last.fm に登録しているものとします．
  https://www.last.fm/api/account/createで API キーを取得します． CallBackURL は空白でいいです．他は適当に入力してください．
![img](https://res.cloudinary.com/pishiko/image/upload/v1605807283/blog/lfmkey_im6rvt.jpg)    アプリケーションをここからダウンロードして，解凍します．
  初回起動時はエラーで設定画面が開くはずなので，先ほどメモった APIKey を入力します． Last.fm User Name には Last.fm のユーザーネームを入力します． お好みで他の設定を変更してください．
![img](https://res.cloudinary.com/pishiko/image/upload/v1605807388/blog/settings_ownmlv.jpg)    保存を押したら discord に NowPlayingCat が表示されているはずです．
  その他 起動中はタスクバーに駐在するので，アイコンを右クリックすることで，アプリケーションを終了したり，設定画面を開いたりできます．
v1.0 からの移行 以前の設定ファイルが settings.ini にあるはずなので，そこに書いてある APIKey を v1.</description>
    </item>
    
    <item>
      <title>Discordのnowplayingに音楽を表示させるのを作った</title>
      <link>https://blog.p4ko.com/posts/fmlast-discord/</link>
      <pubDate>Sat, 09 May 2020 16:06:41 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/fmlast-discord/</guid>
      <description>デスクトップ常駐型アプリケーションを作りました．
Github
使い方
経緯 Last.fm を見つけた ライフログを取るのにハマっていて，GPS とかの記録を取ったりしているのですが，ふと音楽のログも取りたいと思いました．
そのようなサービスがないか調べたところ，Last.fm というものがありました． Spotify などと連携して聞いた音楽のログを取り，似た傾向のおすすめの曲を紹介してくれるそうです． 気に入ったのが，ログを取るための API が用意してあり，PC，スマートフォンのあらゆるプレイヤーで記録できるところで，もし対応していなければ開発すればいいのです．
共有したい Last.fm の API リファレンスを見ていたところ今聞いている曲を取得できるのを見つけたので，これで discord の「プレイ中」欄に表示しようと考えたのでした．さりげなさがいい感じなので．
使ったもの  C# Windows フォームアプリ Last.fm API Discord RPC (Discord Game SDK の C#ラッパー)  ポイントなど C#フォームアプリの基本 あんまり書く機会がなくて，いつも忘れるので．
Form クラスを継承したクラスのインスタンスに初期化処理を書けば動く.
定期実行は Timer クラスがあるので，以下で FunctionName に定期実行したい処理を書けばよい．
var timer = new Timer(); timer.Interval = 5000; //5s timer.Elapsed += FunctionName; timer.Enable = true //動き出す タスクトレイ常駐 参考にしました． http://pineplanter.moo.jp/non-it-salaryman/2017/06/01/c-sharp-tasktray/
全部ここに書いてるのですが，やることは
 タスクトレイにアイコンを追加する タスクトレイアイコンに終了メニューを追加する タスクバーに表示させない フォームを表示させない  です．</description>
    </item>
    
    <item>
      <title>匿名LINEチャットルームを作った</title>
      <link>https://blog.p4ko.com/posts/anonymas-chat/</link>
      <pubDate>Wed, 01 Apr 2020 21:46:39 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/anonymas-chat/</guid>
      <description>概要   LINE の Bot を公開しました。
いままで身内向けの BOT を作ることはあったけど、初めてオープンなのを作りました。
LINE の BOT を作るには HTTP リクエストを受けるサーバーが必要なんですが、サーバーを立てるのはお金がかかります。そこで今回は無料でそれっぽいことができる GoogleAppsScript を用いてやってみました。
ソースコード https://github.com/pishiko/anonymous-linechatbot
実装したこと   基本機能（発言を他の利用者に拡散）
  アイコンの実装
  ミュート機能
  解説   まず LINE API で多数にメッセージを配信するには宛先の userId を指定する必要があります。しかし、Bot と友達になっているユーザーのリストは API では手に入らないため、自分で用意する必要があります。なので、友達登録されたときのイベントを使って記録していきます。
次に記録ですが、DB を GAS でお手軽に実装するには GoogleSpreadSheet を用います。視覚的にも分かりやすいし簡単だし、ちょっと遅いけど使えます。
アイコンはキューを GSS で実装して、友達登録時にユーザーリストに ID と一緒にします。友達をやめたときはアイコンキューに戻してやって、ユーザーリストから ID ごと消してやります。
ミュート機能はユーザーがミュートかどうかリストに保存して、LINE API のリッチメニューから操作できるようにします。リッチメニューは LINE @MANAGER からぽちぽちで作れます。リッチメニューのボタンが押されたらキーワードを発言するように設定して、それを GAS でキャッチします。
最後に発言をほかの登録者に拡散するようにします。LINE API のイベントでメッセージ受信をキャッチして、userId からユーザーリストを検索してアイコンを取得、そのあとユーザーリストの発信者以外かつミュートになっていない人に成形したメッセージを配信します。
おわり</description>
    </item>
    
    <item>
      <title>Youtubeの共有を便利にするWeb Appを作った</title>
      <link>https://blog.p4ko.com/posts/youtube-share-hub/</link>
      <pubDate>Mon, 30 Mar 2020 04:32:22 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/youtube-share-hub/</guid>
      <description>Youtube Share Hub を作った →https://pishiko.github.io/youtube-share-hub/
どんなの？ こんなの
  Youtube の共有メニューから選択してツイートのリンクに遷移する web アプリケーション
そのまま共有しても URL しか共有できないし Twitter カードも表示されないから不便だったので作りました．
どんな技術使った？  PWA  Web Share Target API   vue.js bootstrap Github Pages  PWA について 最低構成は以下になる．
index.html メインのアプリ
serviceworker.js ServiceWorker が動くことでオフラインでもキャッシュで動作したりすることが可能，特にやりたいことが無ければ関数は空でもいい
manifest.json これがキモ．アプリの名前，アイコンから，共有メニューからの動作まで設定できる． 楽ちんジェネレーターもある．アイコンもリサイズしてくれる．https://app-manifest.firebaseapp.com/
Web Share Target API apk のアプリみたいに共有機能が使える．ただし，「なんちゃってホームに追加 Web アプリ」とかじゃこの機能は使えない．
Chrome から PWA アプリと認められる条件は以下
 アイコンが png であること．jpg はだめ ServiceWorker を用意する manifest.json が正しく記述されている  それから，Web Share API は今のところ Android でないと使えない．たのむよ Apple．</description>
    </item>
    
    <item>
      <title>Dash Buttonサービス終了との闘い(敗北)</title>
      <link>https://blog.p4ko.com/posts/dash-button/</link>
      <pubDate>Mon, 17 Feb 2020 10:29:27 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/dash-button/</guid>
      <description>要約  Amazon Dash Button をハックして IoT ボタンにしてた 2020 年に入ってから使えなくなってた 自爆ファームウェアの配信によって文鎮化されてた  昔々&amp;hellip; 実家暮らしなので母親にご飯を作っていただいているので，ご飯ができると「ご飯できたよ～」と呼ばれます．それがお互いにストレスだったので，キッチンには，押すとPush Bulletというサービスからスマホや PC に通知が行くボタンが置いてありました．
仕組みとしては，
 商品発注をオフにした Amazon Dash Button が押される 自宅のサーバで検知（ボタンからの ARP リクエストをキャッチ） IFTTT を通して Push Bullet に通知  といったものでした．
ところが 動かなくなってました．とりあえず初期化しようと思って Amazon アプリから設定しようとしたのですが，設定項目がありませんでした．もしやと思って調べてみたら&amp;hellip;
 Dash Button 端末を使用した商品の注文は、2019 年 8 月 31 日で終了しています。
端末は 2019 年 12 月 31 日に自動的に登録解除およびリセットされるため、お客様による操作は必要ありません。なお、Dash Button 端末を廃棄する前に手動での登録解除をご希望の場合は、コンテンツと端末の管理にアクセスして、端末タブから登録を解除できます。お使いの Dash Button を選択し、登録の解除をクリックしてください。最後に、Dash Button 端末を 1 回押します。ライトが白く点滅した後、赤く点灯します。
 https://www.amazon.co.jp/gp/help/customer/display.html?nodeId=201706050
とのこと．
サービス終了&amp;hellip;
自爆とは どうやら 2020 年になってからボタンを押してアマゾンのサーバにリクエストを送ると，文鎮化するファームウェアアップデートが実行される模様． スパイ映画でよく見た「なお，このメッセージは自動的に消滅する．」ってやつだ&amp;hellip;</description>
    </item>
    
    <item>
      <title>このブログをHugoで作った</title>
      <link>https://blog.p4ko.com/posts/hugo1/</link>
      <pubDate>Sun, 02 Feb 2020 09:29:15 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/hugo1/</guid>
      <description>Hugo ＋ GitHub Pages このブログは Hugo + github pages で公開しています．テンプレートのカスタムをしてると意外と情報が無かったです．ということで，Hugo のインストールからブログの更新まで簡単にメモしたいと思います．
そもそもなにそれ Hugo は静的ブログジェネレータというやつです．テンプレートと markdown の記事を用意すればhugoで index.html なんかを生成してくれます．Go 製です．早いです．
github pages はリポジトリに置いておいた静的ファイルをホストしてくれるサービスです．
Hugo のインストール Windows10 の場合です． https://github.com/gohugoio/hugo/releasesから最新リリースをダウンロードしてパスを通します．Hugo\binなんかにHugo.exeを移して PATH を通します．
そういえばこのとき PATH の上限 2000 文字くらいを超えてて GUI だとうまくいかないというのに出会った．とりあえずユーザ環境変数にしておいた．
Hugo のテーマ適用 hugo new site myblog  これでわーっと一式生成してくれます．
その後，https://themes.gohugo.io/で適当なテーマをダウンロードし，\themes\直下に適当な名前（テーマ名とか）にリネームしてディレクトリごとコピーします．
\config.tomlに設定を色々書いていきます．と言っても基本はコピペです．絶対に変えるのは
baseURL = &amp;quot;例 https://pishiko.github.io&amp;quot; theme = &amp;quot;さっきリネームしたテンプレート名&amp;quot;  で，あとは（テンプレートによると思いますが，）\themes\適当なテンプレート名\exampleSite\config.tomlにテンプレート固有の設定があったのでコピペして適宜変更しました．
Hugo でブログ生成 hugo new content\posts\test.md  するとひな形が生成されます． ひな形はこんな感じにすれば OK
--- title: &amp;quot;Hello, world!&amp;quot; date: 2020-02-01T23:08:52+09:00 draft: false tags: [&amp;quot;memo&amp;quot;] --- 注意すべきはdraftで，trueだと非公開状態（＝ debug モード）のみ公開なので false にしないとデプロイしても反映されなくて泣く．</description>
    </item>
    
    <item>
      <title>Hello, world!</title>
      <link>https://blog.p4ko.com/posts/firstpost/</link>
      <pubDate>Sat, 01 Feb 2020 23:08:52 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/firstpost/</guid>
      <description>こんにちは．@pishitaro_です．
サークル(？)のブログとは別にメモとしてブログを作ってみました．こっちではプログラミング成果物のメモが主になります．
ちょこちょこ書いていく予定です．
おわり</description>
    </item>
    
  </channel>
</rss>
