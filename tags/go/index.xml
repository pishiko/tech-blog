<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on ぴしめも</title>
    <link>https://blog.p4ko.com/tags/go/</link>
    <description>Recent content in go on ぴしめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 23 Nov 2020 00:24:55 +0900</lastBuildDate><atom:link href="https://blog.p4ko.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go ファミコンエミュレータ開発記録 その1</title>
      <link>https://blog.p4ko.com/posts/nes1/</link>
      <pubDate>Mon, 23 Nov 2020 00:24:55 +0900</pubDate>
      
      <guid>https://blog.p4ko.com/posts/nes1/</guid>
      <description>リポジトリ
 日記みたいなものです． Twitter モーメントはこちら
動機 任天堂レトロハードが好きなんですが，せっかくなら遊ぶだけじゃなくて中身にも詳しくなりたいと思っていました． 一番好きなのはスーファミなんですが，仕様が公開されておらず難易度が高そうなので，とりあえずシンプルそうなファミコンの動作の理解をしようと． で，前に Qiita でファミコンエミュレータの Hello world 解説記事があったのを思い出したので，今ならできる！と思って始めました．
偉大なる先駆者様 ファミコンエミュレータの創り方　- Hello, World!編 - - Qiita
Python で実装したい！ 最初は他の人がまだやっていないものを作りたくて，Python で書いて matplot のグラフ出力画面で動いたらオツだよな～と思って書いていたのですが，普通に CPU が 60fps でないので泣く泣く諦めました．
これは果たされなかった夢の跡です． loading...
&amp;mdash; pishiko (@pishitaro_) loading...
実装の流れは，ROM reader-&amp;gt;CPU（Adressing -&amp;gt; OP -&amp;gt; WRAM read/write）-&amp;gt; PPU( VRAM read/write -&amp;gt;Line 生成-&amp;gt;描画 )でした．
Go 編 ということで，妥協して golang を採用しました． python は 8bit で uint として数値を扱えないので書きにくかったのですが，Go は圧倒的に楽でした．
Python のソースコードをほぼ移植する形で，HelloWorld を実行したところ CPU は 60fps 十分に出ました．最高！</description>
    </item>
    
  </channel>
</rss>
